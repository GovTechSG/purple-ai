{
  "div_aria-expanded": "The issue in the given code snippet is that the `aria-expanded` attribute is not allowed on a `div` element.\n\nTo fix the issue, you can use a button element instead of a div, as the `aria-expanded` attribute is allowed on button elements. Here's the corrected version of the code snippet:\n\n```\n<button aria-expanded=\"false\"></button>\n```",
  "div_aria-controls_aria-expanded_aria-haspopup": "The issue here is that the `div` element has ARIA attributes that are not allowed for its role. Specifically, the `aria-haspopup` attribute should be used only with elements that have a role of `button`, `menuitem`, `combobox`, or `textbox`.\n\nTo fix the issue, you can change the `div` element to a `button` element and remove the `aria-haspopup` attribute if it's not necessary. If the element should indeed open a dialog, you can keep the `aria-haspopup` attribute.\n\nHere's the corrected version of the code snippet:\n\n```html\n<button aria-controls=\"el-id-8872-1\" aria-expanded=\"false\" aria-haspopup=\"dialog\">\n```\n\nIf the `div` element must remain a `div`, you can assign it a proper role and style it accordingly:\n\n```html\n<div role=\"button\" aria-controls=\"el-id-8872-1\" aria-expanded=\"false\" aria-haspopup=\"dialog\" tabindex=\"0\">\n```\n\nIn this case, don't forget to add `tabindex=\"0\"` to make the `div` focusable and handle keyboard events for accessibility purposes.",
  "fieldset_aria-required": "The issue in the code snippet is that the `aria-required` attribute is not allowed on the `fieldset` element. Instead, you should apply the `aria-required` attribute to the individual form controls within the fieldset. Here's the corrected version of the code snippet:\n\n```\n<fieldset>\n  <input type=\"text\" aria-required=\"true\">\n  <!-- other form controls -->\n</fieldset>\n```\n\nIn this example, the `aria-required` attribute is applied to the `input` element, which is a form control within the fieldset. Make sure to apply the `aria-required` attribute to all the required form controls within the fieldset.",
  "div_aria-label_style_tabindex_title": "The issue in the code snippet is the usage of the `aria-label` attribute on a `div` element, which is not allowed. A better alternative would be to use a more appropriate element with an inherent role, such as a `button` or `a` (anchor) element, depending on the intended functionality.\n\nHere's the corrected version of the code snippet using a `button` element:\n\n```html\n<button style=\"border: none; height: 90px; width: 728px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-block;\" tabindex=\"0\" title=\"...\" aria-label=\"...\">\n</button>\n```\n\nOr, if it's meant to be a link, you can use an `a` (anchor) element:\n\n```html\n<a href=\"#\" style=\"border: none; height: 90px; width: 728px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-block;\" tabindex=\"0\" title=\"...\" aria-label=\"...\">\n</a>\n```\n\nMake sure to adjust the `href` attribute for the anchor element or add necessary JavaScript event listeners for the button element to achieve the desired functionality.",
  "span_aria-expanded": "The issue is that the `aria-expanded` attribute is not allowed on a `span` element. To fix this, we can use a more appropriate element, such as a `button`. Here's the corrected code snippet:\n\n```html\n<button aria-expanded=\"false\">...</button>\n```\n\nNow, the `aria-expanded` attribute is correctly used with a `button` element, making it accessible.",
  "a_role=\"menuitemradio\"": "The issue in the code snippet is that the `aria-selected` attribute is not allowed for the `menuitemradio` role. Instead, the `aria-checked` attribute should be used.\n\nHere's the correct version of the code snippet:\n\n```\n<a aria-checked=\"false\" href=\"...\" role=\"menuitemradio\">\n```",
  "span_aria-sort": "The issue here is that the `aria-sort` attribute is not allowed on a `span` element. The `aria-sort` attribute should be used on elements with a role of \"columnheader\" or \"rowheader\".\n\nTo fix the issue, you can change the element to a `th` (table header) with a role of \"columnheader\" or \"rowheader\" and apply the `aria-sort` attribute to it. Here's the corrected version of the code snippet:\n\n```html\n<th role=\"columnheader\" aria-sort=\"none\">...</th>\n```\n\nIf you still want to use a `span` element, you can wrap it inside a `th` element with the appropriate role and `aria-sort` attribute:\n\n```html\n<th role=\"columnheader\" aria-sort=\"none\"><span>...</span></th>\n```",
  "mat-chip-list_aria-disabled_aria-invalid_aria-label_aria-multiselectable_aria-orientation_tabindex": "The issue in the given code snippet is the use of `aria-disabled`, `aria-invalid`, and `aria-multiselectable` attributes on a `mat-chip-list` element. These ARIA attributes are not allowed for this element's role.\n\nThe correct version of the code snippet should be:\n\n```\n<mat-chip-list aria-label=\"...\" aria-orientation=\"horizontal\" tabindex=\"-1\">\n```",
  "a_role=\"link\"": "The issue in the given code snippet is the use of `aria-checked` attribute on an element with the role of \"link\". The `aria-checked` attribute is not allowed for elements with the role of \"link\". To fix the issue, simply remove the `aria-checked` attribute from the element.\n\nCorrected version of the code snippet:\n\n```html\n<a aria-label=\"...\" aria-labelledby=\"...\" href=\"...\" role=\"link\">\n```",
  "div_role=\"button\"": "The issue in the given code snippet is that the `aria-selected` attribute is not allowed for the element with a role of \"button\". To fix this, simply remove the `aria-selected` attribute.\n\nHere's the corrected version of the code snippet:\n\n```\n<div aria-controls=\"elementor-tab-content-1131\" aria-expanded=\"true\" role=\"button\" tabindex=\"0\">\n```",
  "button_aria-controls_aria-selected_style_tabindex_type": "The issue in the code snippet is the use of the `aria-selected` attribute on a `button` element. The `aria-selected` attribute is not allowed for the `button` role.\n\nHere's the corrected version of the code snippet:\n\n```html\n<button aria-controls=\"OPGO_Common_CW_wt105_block_OPGO_TH_wt4_block_wt71_OutSystemsUIWeb_wt8_block_wtContent_wtMainContent_wtMainContent_wtMainContent_OPGO_Patterns_wtOPGOCarousel_block_OutSystemsUIWeb_wt9_block_wtItems-item0\" style=\"\" tabindex=\"0\" type=\"button\">\n```\n\nIn this corrected version, I have removed the `aria-selected` attribute from the `button` element.",
  "a_aria-expanded_aria-haspopup_type_span": "The issue here is that the ARIA attributes `aria-expanded` and `aria-haspopup` are not allowed on an `<a>` element with a role of \"button\". To fix the issue, you can change the `<a>` element to a `<button>` element.\n\nCorrected code snippet:\n\n```html\n<button aria-expanded=\"true\" aria-haspopup=\"true\"><span></span></button>\n```",
  "div_aria-multiselectable": "The issue here is that the `aria-multiselectable` attribute is not allowed on a `div` element. This attribute should be used on elements with a role of `listbox` or `tablist`.\n\nHere's the correct version of the code snippet:\n\n```\n<div role=\"listbox\" aria-multiselectable=\"true\">\n```",
  "a_aria-expanded": "The issue here is that the `aria-expanded` attribute is not allowed on an `<a>` element. To fix this, consider using a `<button>` element instead.\n\nIncorrect code snippet:\n```html\n<a aria-expanded=\"true\">\n```\n\nCorrected code snippet:\n```html\n<button aria-expanded=\"true\">\n```",
  "div_aria-modal_style": "The issue is that the `aria-modal` attribute is not allowed on a `div` element. To fix this, you should use a `dialog` element instead. Here's the correct version of the code snippet:\n\n```html\n<dialog aria-modal=\"true\" style=\"display: block;\">\n```\n\nThis will ensure that the element has the appropriate role and the ARIA attribute is correctly applied.",
  "li_aria-checked_tabindex": "The issue in the code snippet is that the `aria-checked` attribute is not allowed on an `li` element. To fix the accessibility issue, you can use a different element with a proper role, such as a checkbox input or a `role=\"checkbox\"` attribute.\n\nCorrect version of the code snippet:\n\n```html\n<li role=\"checkbox\" aria-checked=\"true\" tabindex=\"0\"></li>\n```\n\nOr, using a checkbox input:\n\n```html\n<li>\n  <input type=\"checkbox\" checked tabindex=\"0\">\n</li>\n```",
  "input_aria-expanded_title_type": "The issue in the given code snippet is that the `aria-expanded` attribute is not allowed for an `input` element with a `type` of \"text\". The `aria-expanded` attribute is used to indicate whether a collapsible element is expanded or collapsed, which is not applicable to a text input.\n\nTo fix the issue, simply remove the `aria-expanded` attribute from the input element:\n\nCorrected code snippet:\n```\n<input title=\"...\" type=\"text\">\n```",
  "nav_aria-label_aria-orientation": "The issue here is that the `aria-orientation` attribute is not allowed for the `nav` element's role. To fix the accessibility issue, simply remove the `aria-orientation` attribute from the `nav` element.\n\nCorrect version of the code snippet:\n\n```html\n<nav aria-label=\"...\">\n```\n\nIf you need to specify the orientation of a navigation menu inside the `nav` element, you can use a list with a proper role, like this:\n\n```html\n<nav aria-label=\"...\">\n  <ul role=\"menu\" aria-orientation=\"vertical\">\n    <!-- Menu items here -->\n  </ul>\n</nav>\n```",
  "div_aria-selected": "The issue in the code snippet is that the `aria-selected` attribute is not allowed on a `<div>` element by default. To fix this, you can add a valid role to the `<div>` element, such as `role=\"option\"` if it's being used as an option within a list.\n\nCorrected code snippet:\n\n```\n<div role=\"option\" aria-selected=\"true\"></div>\n```",
  "fieldset_aria-describedby_aria-required": "The issue here is that the `aria-required` attribute is not allowed on a `fieldset` element. Instead, you should use the `required` attribute on the individual input elements within the fieldset. Here's the corrected version of the code snippet:\n\n```html\n<fieldset aria-describedby=\"...\">\n  <!-- Add required attribute to the individual input elements -->\n  <input type=\"text\" required>\n  <!-- More input elements -->\n</fieldset>\n```",
  "span_aria-controls_aria-expanded_href": "The issue with the code snippet is that the `aria-controls` and `aria-expanded` attributes are not allowed for the `span` element's role. These attributes are only allowed for elements with the role of `button`, `checkbox`, `menuitem`, `tab`, `switch`, or `treeitem`.\n\nThe correct version of the code snippet would be to use a different element with the appropriate role, such as a `button` element:\n\n```\n<button aria-controls=\"collapseOne\" aria-expanded=\"true\" href=\"...\">...</button>\n```",
  "div_role=\"tabpanel\"": "The issue with the code snippet is that `aria-multiselectable` is not a valid attribute for the `tabpanel` role. The correct version of the code snippet should be:\n\n<`div` `role`=\"tabpanel\" `aria-multiselectable`=\"false\">",
  "div_aria-expanded_title": "The issue with this code snippet is that the `aria-expanded` attribute is not allowed for a `div` element. According to the WAI-ARIA specification, the `aria-expanded` attribute is only allowed for elements with the `role` of `button`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, or `treeitem`.\n\nThe correct version of the code snippet would be to remove the `aria-expanded` attribute from the `div` element and use a different element with the appropriate `role` attribute if necessary. For example, if the intention was to create an expandable/collapsible section, the `details` and `summary` elements could be used instead.",
  "nx-progressbar_aria-valuenow_div_div_style": "The issue with the code snippet is that the `aria-valuenow` attribute is not allowed for the `nx-progressbar` element's role. \n\nThe correct version of the code snippet would be: \n\n<`div` `role`=\"progressbar\" `aria-valuenow`=\"0\" `aria-valuemin`=\"0\" `aria-valuemax`=\"100\"><`div` `style`=\"transform: scaleX(0);\"></div></div> \n\nIn this version, the `aria-valuenow` attribute is used on a `div` element with the `role` attribute set to \"progressbar\", which is the correct role for a progress bar. The `aria-valuemin` and `aria-valuemax` attributes are also included to define the minimum and maximum values for the progress bar.",
  "div_aria-expanded_type_i": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `div` element's role. The correct version of the code snippet would be: `<button aria-expanded=\"false\"><i></i></button>`. This replaces the `div` element with a `button` element, which is the appropriate role for a clickable element. Also, the `type` attribute is not necessary for a `button` element.",
  "a_aria-controls_aria-expanded": "The issue with the code snippet is that the `aria-controls` and `aria-expanded` attributes are not allowed for the `a` element's role. These attributes are only allowed for elements with roles that support them, such as `button` or `combobox`. \n\nThe correct version of the code snippet would be:\n\n<a href=\"#\" role=\"button\" aria-controls=\"gov-banner\" aria-expanded=\"true\">Link Text</a>\n\nIn this version, the `a` element's role has been changed to `button` to support the use of the `aria-controls` and `aria-expanded` attributes. Additionally, a `href` attribute has been added to ensure the link is still functional for users who do not rely on assistive technology.",
  "section_aria-expanded": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `section` element's role. The correct version of the code snippet should be:\n\n<`section` `role`=\"region\" `aria-expanded`=\"false\">",
  "a_role=\"button\"": "The issue with this code snippet is that the `aria-selected` attribute is not allowed for an `a` element with `role=\"button\"`. The `aria-selected` attribute is only allowed for elements with `role=\"option\"`, `role=\"checkbox\"`, `role=\"radio\"`, or `role=\"tab\"`. \n\nThe correct version of the code snippet would be: \n\n<a href=\"...\" role=\"button\" title=\"...\"></a>",
  "section_aria-expanded_style": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `section` element. According to the WAI-ARIA specification, the `aria-expanded` attribute is only allowed for elements with a role of `button`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, or `treeitem`. \n\nThe correct version of the code snippet would be:\n\n<`section` `role`=\"region\" `aria-label`=\"Section Title\" `style`=\"top: 0px; position: sticky;\"> \n\nNote: The `role` attribute has been added to specify the role of the `section` element as a region, and the `aria-label` attribute has been added to provide a descriptive label for the region.",
  "p_aria-level": "The issue with the code snippet is that `aria-level` attribute is not allowed for the `p` element's role. \n\nThe correct version of the code snippet would be: `<h1>Heading level 1</h1>` or `<h2 aria-level=\"1\">Heading level 1</h2>` depending on the context and content of the element.",
  "span_aria-required": "The issue with the code snippet is that the `aria-required` attribute is not allowed for a `span` element. The `aria-required` attribute is only allowed for form elements such as `input`, `select`, and `textarea`.\n\nThe correct version of the code snippet would be to use a form element that supports the `aria-required` attribute, or to use a different ARIA attribute that is appropriate for the `span` element's role. For example, if the `span` element is being used as a label for an input field, the `aria-labelledby` attribute could be used instead.",
  "td_role=\"button\"": "The issue with the code snippet is that `aria-selected` attribute is not allowed for the `button` role. The correct version of the code snippet is:\n\n<td aria-label=\"...\" role=\"button\" style=\"width: 14.2857%; padding-top: 7.14286%; padding-bottom: 7.14286%;\" tabindex=\"-1\"><div></div></td>\n\nNote that `aria-selected` attribute has been removed.",
  "li_role=\"presentation\"": "The issue with the code snippet is that the `aria-controls`, `aria-hidden`, and `aria-selected` attributes are not allowed for the `role=\"presentation\"` element. These attributes are only allowed for certain roles such as `tab`, `treeitem`, and `tabpanel`. \n\nThe correct version of the code snippet would be:\n\n<li role=\"none presentation\"><button role=\"button\" tabindex=\"0\" type=\"button\"></button></li>\n\nIn this version, the `aria-controls`, `aria-hidden`, and `aria-selected` attributes have been removed and the `role` attribute has been updated to `none presentation`, which allows the element to be treated as a presentation role but without the additional ARIA attributes.",
  "div_aria-checked": "The issue with this code snippet is that the `aria-checked` attribute is not allowed for the `div` element's role. The `aria-checked` attribute is typically used for checkboxes and radio buttons. \n\nThe correct version of the code snippet would be to either change the `div` element's role to a checkbox or radio button, or to remove the `aria-checked` attribute altogether if it is not necessary for the element's functionality.",
  "p_role=\"note\"": "The issue with the code snippet is that the `aria-multiselectable` attribute is not allowed for the `note` role. \n\nThe correct version of the code snippet should be: `<p role=\"note\"></p>`",
  "div_role=\"header\"": "The issue with this code snippet is that the `aria-level` attribute is not allowed for the `header` role. The correct version of the code snippet should be: `<div role=\"heading\" aria-level=\"2\"></div>` where the `role` attribute is changed to `heading` which is the appropriate role for a header element, and the `aria-level` attribute is placed after the `role` attribute.",
  "div_aria-disabled_aria-expanded": "The issue with the code snippet is that the `aria-disabled` attribute is not allowed for a `div` element. According to the WAI-ARIA specification, the `aria-disabled` attribute is only allowed for form elements, links, and widgets.\n\nThe correct version of the code snippet would be:\n\n<`div` `aria-hidden`=\"false\" `aria-expanded`=\"true\">\n\nThe `aria-hidden` attribute can be used to indicate that an element is not visible or perceivable to all users, which is more appropriate for a `div` element.",
  "md-radio-button_role=\"radio\"": "The issue with this code snippet is that the `aria-readonly` attribute is not allowed for an element with `role=\"radio\"`. The correct version of the code snippet should be: `<md-radio-button aria-checked=\"true\" aria-label=\"...\" role=\"radio\" value=\"...\">`",
  "div_aria-expanded_h4_strong_a_href": "The issue with this code snippet is that the `aria-expanded` attribute is not allowed for a `div` element. According to the ARIA specification, the `aria-expanded` attribute is only allowed for elements with the role of `button`, `checkbox`, `menuitem`, `radio`, and `treeitem`.\n\nThe correct version of the code snippet would be: <`div` role=\"button\"><`h4`><`strong`><`a` `href`=\"...\" aria-expanded=\"false\"></a></strong></h4></div>\n\nIn this version, we have added the `role` attribute to the `div` element and changed the placement of the `aria-expanded` attribute to the `a` element, which has the appropriate role for this attribute.",
  "button_role=\"button\"": "The issue with the code snippet is that the `aria-required` attribute is not allowed for the `button` element's role. According to the WAI-ARIA specification, the `aria-required` attribute is only allowed for form elements such as `input`, `select`, and `textarea`. Therefore, this attribute should be removed from the `button` element.\n\nCorrect version of the code snippet: <`button` `role`=\"button\" `tabindex`=\"0\" `type`=\"button\"></button>",
  "li_aria-selected": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `<li>` element's role. The correct version of the code snippet would be:\n\n<li role=\"option\" aria-selected=\"true\">",
  "div_role=\"document\"": "The issue with this code snippet is that the `aria-modal` attribute is not allowed for the `role` of `document`. The correct version of the code snippet would be: `<div role=\"dialog\" aria-modal=\"true\" tabindex=\"0\" style=\"\">`",
  "a_aria-expanded_value-filter": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `a` element's role. \n\nThe correct version of the code snippet is: `<a role=\"button\" aria-expanded=\"true\" data-value-filter=\"all\"></a>`. \n\nIn the corrected version, the `role` attribute has been added to specify that the `a` element acts as a button, and the `aria-expanded` attribute is now allowed. Additionally, the `value-filter` attribute has been changed to `data-value-filter` to avoid any potential conflicts with HTML5.",
  "li_aria-expanded_aria-haspopup": "The issue with the code snippet is that the `aria-expanded` and `aria-haspopup` attributes are not allowed for the `li` element's role. \n\nThe correct version of the code snippet would be:\n\n<`button` `aria-expanded`=\"false\" `aria-haspopup`=\"true\"> \n\nThis is because `aria-expanded` and `aria-haspopup` are allowed for the `button` element's role, which is commonly used for dropdown menus.",
  "tr_aria-colspan": "The issue with this code snippet is that the `aria-colspan` attribute is not allowed for the `tr` element's role. Instead, the `aria-colspan` attribute should be used on the `td` element. \n\nThe corrected version of the code snippet is:\n\n<tr>\n  <td aria-colspan=\"3\"></td>\n</tr>",
  "div_aria-label_aria-multiselectable": "The issue with the code snippet is that the `aria-multiselectable` attribute is not allowed for a `div` element. This attribute is only allowed for elements with the role of `tree`, `grid`, or `listbox`. \n\nThe correct version of the code snippet would be:\n\n<`div` `aria-label`=\"...\" role=\"listbox\">",
  "nav_role=\"navigation\"": "The issue with this code snippet is that the `aria-multiselectable` attribute is not allowed for the `navigation` role. \n\nThe correct version of the code snippet would be: \n\n<`nav` `aria-label`=\"...\" `role`=\"navigation\">",
  "iframe_role=\"presentation\"": "The issue with the code snippet is that the `aria-modal` attribute is not allowed for an `iframe` element with a `role` of `presentation`. The `aria-modal` attribute is only allowed for `dialog` and `alertdialog` roles. \n\nThe correct version of the code snippet would be: \n\n<`iframe` `aria-hidden`=\"false\" `name`=\"...\" `role`=\"presentation\" `src`=\"...\" `style`=\"height: 100%; width: 100%; color-scheme: light;\">",
  "div_aria-expanded_aria-hidden": "The issue with this code snippet is that the `div` element is not allowed to have the `aria-expanded` and `aria-hidden` attributes as they are reserved for elements with specific roles. \n\nThe correct version of the code snippet would be to use a different element with the appropriate role, such as a button or an accordion, and apply the `aria-expanded` and `aria-hidden` attributes to that element instead.",
  "span_aria-expanded_span_span": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `span` element. The correct version of the code snippet would be:\n\n<`div` `role`=\"button\" `aria-expanded`=\"false\"><`span`></span><`span`></span></div>\n\nIn this corrected version, the `span` element has been replaced with a `div` element with a `role` of \"button\", which allows the use of the `aria-expanded` attribute.",
  "div_role=\"textbox\"": "The issue with the code snippet is that the `role` attribute is set to \"textbox\", but it also has ARIA attributes such as `aria-haspopup`, `aria-owns`, and `aria-readonly` which are not allowed for the \"textbox\" role.\n\nThe correct version of the code snippet would be:\n\n<`input` `aria-disabled`=\"false\" `aria-label`=\"...\" `aria-valuemax`=\"Fri Jan 01 2100 00:00:00 GMT+0100 (Central European Standard Time)\" `aria-valuemin`=\"Mon Jan 01 1900 00:00:00 GMT+0009 (Central European Standard Time)\" `aria-valuenow`=\"\" `aria-valuetext`=\"\" `role`=\"textbox\" `style`=\"margin: 4px 4px 4px 5px; width: 189px; height: 25px;\"> \n\nIn this version, the `role` attribute is set to \"textbox\" and the ARIA attributes that are not allowed for this role have been removed. Additionally, the `div` element has been replaced with an `input` element, which is the appropriate element for a text input field.",
  "li_role=\"listitem\"": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `listitem` role. The correct version of the code snippet is:\n\n<li role=\"listitem\" aria-selected=\"false\">",
  "a_role=\"tablist\"": "The issue with this code snippet is that the `aria-controls` and `aria-selected` attributes are not allowed for the `role` of `tablist`. \n\nThe correct version of the code snippet would be:\n\n<`a` `href`=\"...\" `role`=\"tab\" `aria-controls`=\"tab-6395\" `aria-selected`=\"true\">",
  "a_aria-expanded_i": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for an `<a>` element. This attribute is only allowed for elements with the role of button, checkbox, menuitem, or treeitem. \n\nCorrected code snippet: \n```\n<button aria-expanded=\"false\"><i></i></button>\n```\nAlternatively, if the `<a>` element is necessary, the role can be added to make the `aria-expanded` attribute valid:\n```\n<a href=\"#\" role=\"button\" aria-expanded=\"false\"><i></i></a>\n```",
  "ion-modal_aria-modal_style_tabindex": "The issue with this code snippet is that the `aria-modal` attribute is not allowed for the `ion-modal` element's role. The correct version of the code snippet should be:\n\n<`ion-modal` `role`=\"dialog\" `aria-modal`=\"true\" `style`=\"z-index: 20001;\" `tabindex`=\"-1\">\n\nBy adding the `role` attribute with a value of \"dialog\", it allows the `aria-modal` attribute to be used correctly and improves accessibility for users.",
  "div_aria-invalid_aria-required": "The issue with the code snippet is that the `div` element is not a form field and therefore should not have `aria-invalid` and `aria-required` attributes. These attributes are only allowed for form fields like `input`, `select`, and `textarea`.\n\nThe correct version of the code snippet would be:\n\n<div> \n  <!-- add form field here -->\n</div> \n\nIf there is no form field within the `div`, then it is not necessary to add the `aria-invalid` and `aria-required` attributes.",
  "div_role=\"gridcell\"": "The issue with the code snippet is that the `aria-activedescendant` attribute is not allowed for the `gridcell` role. \n\nThe correct version of the code snippet would be:\n\n<div aria-label=\"...\" role=\"gridcell\"></div> \n\nThis removes the `aria-activedescendant` attribute, which is not appropriate for the `gridcell` role.",
  "p_aria-required_name": "The issue with the code snippet is that the `aria-required` attribute is not allowed for the `p` element's role. According to the WAI-ARIA specification, the `aria-required` attribute is only allowed for form controls. Therefore, the correct version of the code snippet would be:\n\n<`p` `role`=\"textbox\" `aria-required`=\"true\" `name`=\"...\">\n\nIn this corrected version, the `role` attribute is added to specify that the `p` element is being used as a textbox, which allows for the use of the `aria-required` attribute.",
  "div_aria-pressed_input_aria-label_name_type_value": "The issue with the code snippet is that the `aria-pressed` attribute is not allowed for a `div` element with a `checkbox` role. The correct version of the code snippet would be:\n\n<label>\n  <input aria-label=\"...\" name=\"...\" type=\"checkbox\" value=\"...\" />\n  <span aria-hidden=\"true\">...</span>\n</label>\n\nThis code snippet uses a `label` element to associate the `input` with its label text, and a `span` element with `aria-hidden` attribute to visually hide the label text from screen readers. This is the recommended approach for creating accessible checkboxes.",
  "label_aria-controls_aria-expanded_for_tabindex": "The issue with this code snippet is that the `aria-controls` and `aria-expanded` attributes are not allowed for the `label` element's role. These attributes are only allowed for elements with the role of `tab`, `treeitem`, `gridcell`, or `button`. \n\nThe correct version of the code snippet would be:\n\n```html\n<label for=\"tab-1\" tabindex=\"0\">Label Text</label>\n```\n\nIf the `aria-controls` and `aria-expanded` attributes are necessary for accessibility, they should be added to the element that has the appropriate role.",
  "svg_aria-disabled_aria-readonly": "The issue with the code snippet is that the `aria-disabled` and `aria-readonly` attributes are not allowed for the `svg` element's role. These attributes are only allowed for certain roles such as buttons, inputs, and form elements. \n\nThe correct version of the code snippet would be:\n\n<svg role=\"img\" aria-disabled=\"false\" aria-readonly=\"false\"> \n\nIn this version, the `role` attribute has been added to specify the role of the `svg` element and allow the use of the `aria-disabled` and `aria-readonly` attributes.",
  "a_aria-expanded_tabindex": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `a` element's role. The correct version of the code snippet would be:\n\n<a role=\"button\" aria-expanded=\"false\" tabindex=\"0\">",
  "dl_aria-multiselectable": "The issue with the code snippet is that the `aria-multiselectable` attribute is not allowed for the `dl` element's role. \n\nThe correct version of the code snippet would be:\n\n<`div` `role`=\"listbox\" `aria-multiselectable`=\"true\">",
  "form_aria-expanded_style": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `form` element's role. This attribute is typically used for elements that can be expanded or collapsed, such as a menu or a tree. \n\nThe correct version of the code snippet would be: \n\n<`form` `style`=\"--menu-open-height: 133px;\">",
  "hr_role=\"presentation\"": "The issue with the code snippet is that the `aria-orientation` attribute is not allowed for the `hr` element with `role=\"presentation\"`. \n\nThe correct version of the code snippet would be: \n\n<`hr` `role`=\"separator\" `aria-orientation`=\"vertical\"> \n\nThis code snippet uses the `role=\"separator\"` attribute which is appropriate for the `hr` element, and the `aria-orientation` attribute is allowed for this role.",
  "div_aria-required": "The issue with the code snippet is that the `aria-required` attribute is not allowed for a `div` element. The correct version of the code snippet would be to use a different element that allows the `aria-required` attribute, such as an `input` element: `<input type=\"text\" aria-required=\"true\">`",
  "md-input-container_aria-invalid_aria-readonly": "The issue with this code snippet is that `md-input-container` element does not have a role attribute defined, so it is not clear what role the element is fulfilling. Therefore, it is not possible to determine which ARIA attributes are allowed or not allowed for this element.\n\nThe correct version of the code snippet should include a role attribute that defines the role of the `md-input-container` element. For example, if the element is a form field container, the role attribute should be set to \"form\". The corrected code snippet would be:\n\n<md-input-container role=\"form\" aria-invalid=\"false\" aria-readonly=\"false\">",
  "a_aria-selected": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `a` element's role. The correct version of the code snippet would be to use a different element with a role that allows for the `aria-selected` attribute, such as a `button` element with `role=\"tab\"`:\n\n```\n<button role=\"tab\" aria-selected=\"true\"></button>\n```",
  "input_role=\"textbox\"": "The issue with the code snippet is that the `aria-haspopup` attribute is not allowed for an input element with the `role` attribute set to \"textbox\". The correct version of the code snippet would be:\n\n<`input` `aria-autocomplete`=\"list\" `aria-busy`=\"false\" `aria-describedby`=\"...\" `aria-disabled`=\"false\" `aria-expanded`=\"false\" `aria-label`=\"...\" `aria-readonly`=\"false\" `role`=\"textbox\" `style`=\"width: 169.594px;\" `tabindex`=\"0\" `title`=\"...\">\n",
  "div_aria-expanded_div_div_h2_br": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for a `div` element. This attribute is only allowed for elements with the role of `button`, `checkbox`, `menuitem`, `radio`, or `treeitem`. \n\nThe correct version of the code snippet would be:\n\n<`button` `aria-expanded`=\"false\"><`div`><`div`><`h2`><`br`></h2></div></div></button> \n\nHere, the `div` element has been replaced with a `button` element, which is allowed to have the `aria-expanded` attribute.",
  "span_role=\"\"": "The issue with the code snippet is that the `aria-level` attribute is not allowed for the `span` element's role. The correct version of the code snippet would be:\n\n<`span` `role`=\"heading\" `aria-level`=\"2\"> \n\nThis sets the `span` element's role to \"heading\" and allows the use of the `aria-level` attribute.",
  "li_aria-controls_aria-selected": "The issue with the code snippet is that the `aria-controls` and `aria-selected` attributes are not allowed for the `li` element's role. These attributes are only allowed for elements with roles that support them. \n\nThe correct version of the code snippet would be:\n\n<li role=\"tab\" aria-controls=\"mmid-cpf-overview\" aria-selected=\"false\">",
  "p_aria-level_style": "The issue with the code snippet is that the `aria-level` attribute is not allowed for the `p` element. The `aria-level` attribute is only allowed for `h1` to `h6` elements to indicate the heading level. \n\nThe correct version of the code snippet would be: \n\n<`h1` `aria-level`=\"1\" `style`=\"color: #000000; background-color: transparent; list-style-type: decimal; text-decoration: none;\">",
  "a_aria-expanded_style": "The issue with the code snippet is that the `aria-expanded` attribute is not allowed for the `a` element's role. The correct version of the code snippet would be:\n\n<a role=\"button\" aria-expanded=\"true\" style=\"text-transform:none;\"></a>\n\nBy adding the `role=\"button\"` attribute, it allows the use of the `aria-expanded` attribute.",
  "a_aria-controls_aria-selected_title": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `a` element's role. The correct version of the code snippet would be:\n\n<a aria-controls=\"tab-search\" role=\"tab\" tabindex=\"0\" title=\"...\" aria-selected=\"false\"></a>\n\nBy adding the `role=\"tab\"` attribute, we specify the role of the element and allow the use of `aria-selected`. Additionally, we add `tabindex=\"0\"` to make the element focusable and allow keyboard navigation.",
  "li_role=\"link\"": "The issue with this code snippet is that the `aria-controls` and `aria-selected` attributes are not allowed for an `li` element with a `role` of \"link\". \n\nThe correct version of the code snippet would be:\n\n<li role=\"button\" aria-controls=\"mmid-cpf-overview\" aria-selected=\"false\">",
  "li_role=\"button\"": "The issue with the code snippet is that the `aria-controls` and `aria-selected` attributes are not allowed for the `role` of \"button\". \n\nThe correct version of the code snippet would be:\n\n<`li` `role`=\"button\" `tabindex`=\"0\"> with `aria-controls` and `aria-selected` attributes removed.",
  "p_aria-level_b": "The issue with this code snippet is that the `aria-level` attribute is not allowed for the `<p>` element's role. The `aria-level` attribute is only allowed for heading elements (`<h1>` - `<h6>`). \n\nThe correct version of the code snippet would be: `<p><b aria-level=\"2\"></b></p>`",
  "p_aria-level_strong": "The issue with the code snippet is that the `aria-level` attribute is not allowed for the `p` element. The `aria-level` attribute is only allowed for `heading` elements (`h1` to `h6`). \n\nThe correct version of the code snippet would be: `<h1><strong></strong></h1>` if the intention is to create a heading element. If the intention is to simply emphasize text, then the `p` element can be used with the `aria-labelledby` attribute instead. For example: `<p aria-labelledby=\"section-title\"><strong id=\"section-title\"></strong></p>`",
  "h2_role=\"group\"": "Issue: The `aria-multiline` attribute is not allowed for the `h2` element's `role` of `group`.\n\nCorrect version of the code snippet: \n\n<`h2` `aria-label`=\"...\" `contenteditable`=\"true\" `role`=\"group\">",
  "button_aria-checked_aria-label": "Issue: The `aria-checked` attribute is not allowed for the `button` element.\n\nCorrect version: If the button is not a toggle button, `aria-checked` should not be used. The correct version of the code snippet is: `<button aria-label=\"...\">`",
  "dds-masthead-l1-name_aria-selected_title": "The issue with this code snippet is that the `aria-selected` attribute is not allowed for the `dds-masthead-l1-name` element's role. \n\nThe correct version of the code snippet would be:\n\n<`dds-masthead-l1-name` `role`=\"heading\" `title`=\"...\" aria-level=\"1\"></dds-masthead-l1-name>\n\nIn this version, the `aria-selected` attribute has been removed and replaced with the `aria-level` attribute, which is allowed for the `heading` role.",
  "hgf-button_aria-expanded_aria-haspopup": "The issue with the code snippet is that `aria-expanded` and `aria-haspopup` attributes are not allowed for the `hgf-button` role. \n\nThe correct version of the code snippet would be: \n\n```html\n<button role=\"button\" aria-expanded=\"false\" aria-haspopup=\"true\">\n```\n\nIn this version, the `button` element is used with the `role` attribute set to \"button\", which allows for the use of `aria-expanded` and `aria-haspopup` attributes.",
  "hgf-button_aria-expanded": "The issue with this code snippet is that the `aria-expanded` attribute is not allowed for the `hgf-button` role. The correct version of the code snippet should be:\n\n<button role=\"button\" aria-expanded=\"false\">",
  "a_aria-selected_href": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `a` element's role. The correct version of the code snippet would be:\n\n<a role=\"tab\" aria-selected=\"true\" href=\"...\">\n\nThis ensures that the `aria-selected` attribute is used correctly for the `tab` role.",
  "div_role=\"list\"": "The issue with this code snippet is that the `aria-colspan` attribute is not allowed for a `div` element. It is only allowed for `td` elements in a table. The correct version of the code snippet would be: <`div`><`ul` `role`=\"list\"><`li` `role`=\"listitem\"></li><`li` `role`=\"listitem\"></li></ul></div>",
  "fieldset_role=\"group\"": "The issue with this code snippet is that the `role` attribute is set to \"group\", which does not allow for the use of `aria-describedby`, `aria-invalid`, and `aria-required` attributes. The correct version of the code snippet would be: <`div` `role`=\"group\" `tabindex`=\"0\">, with the `aria-describedby`, `aria-invalid`, and `aria-required` attributes being moved to the relevant form elements within the `div`.",
  "ul_role=\"list\"": "The issue with the code snippet is that the `aria-multiselectable` attribute is not allowed for the `list` role. The correct version of the code snippet would be:\n\n<ul role=\"listbox\" tabindex=\"0\">",
  "yt-tab-shape_aria-selected": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `yt-tab-shape` element's role. \n\nThe correct version of the code snippet would be: \n\n<`yt-tab-shape` `role`=\"tab\" `aria-selected`=\"false\">",
  "pc-accordion-trigger_aria-controls_aria-expanded_aria-label_pc-heading_h3": "The issue with the code snippet is that the `pc-accordion-trigger` element is not allowed to have the `aria-label` attribute. The `aria-label` attribute should only be used on elements that do not have a visible label or text. \n\nThe correct version of the code snippet would be: \n\n<`pc-accordion-trigger` `aria-controls`=\"67-content\" `aria-expanded`=\"true\"><`pc-heading`><`h3` aria-label=\"...\"></h3></pc-heading></pc-accordion-trigger> \n\nIn this version, the `aria-label` attribute has been moved to the `h3` element, which is allowed to have this attribute.",
  "cabp-hyperlink_aria-expanded_aria-haspopup": "The issue with the code snippet is that the `aria-expanded` and `aria-haspopup` attributes are not allowed for the `cabp-hyperlink` element's role. \n\nThe correct version of the code snippet would be:\n\n<`cabp-hyperlink` role=\"button\">",
  "fieldset_aria-multiselectable": "The issue with the code snippet is that the `aria-multiselectable` attribute is not allowed for the `fieldset` element's role. According to the WAI-ARIA specification, the `aria-multiselectable` attribute is only allowed for the `group` role.\n\nThe correct version of the code snippet should be:\n\n<`fieldset` `role`=\"group\" `aria-multiselectable`=\"true\">",
  "button_aria-label_aria-valuemax_aria-valuemin_aria-valuetext": "The issue with this code snippet is that the aria-valuemax, aria-valuemin, and aria-valuetext attributes are not allowed for the button element's role. These attributes are only allowed for input, meter, and progress elements. \n\nThe correct version of the code snippet for a button element would be: \n\n<`button` `aria-label`=\"...\">",
  "button_aria-selected": "The issue with the code snippet is that the `aria-selected` attribute is not allowed for the `button` element's role. According to the WAI-ARIA specification, the `aria-selected` attribute is only allowed for elements with the role of `option`, `checkbox`, `radio`, or `tab`. \n\nThe correct version of the code snippet would be: \n\n<button aria-pressed=\"true\"></button>\n\nThe `aria-pressed` attribute is allowed for the `button` element's role and can be used to indicate the selected state.",
  "ul_aria-multiselectable": "Issue: The `aria-multiselectable` attribute is not allowed for the `ul` element.\n\nCorrect version: If the `ul` element is being used as a list of options for a multi-select component, it should have the `role` attribute set to `listbox` and the `aria-multiselectable` attribute should be removed. The correct code snippet would be:\n\n<`ul` `role`=\"listbox\">",
  "input_role=\"combobox\"": "The issue with the code snippet is that the ARIA attributes `aria-multiline` and `aria-owns` are not allowed for an element with the role of `combobox`. The correct version of the code snippet would be: <`input` `aria-disabled`=\"false\" `aria-expanded`=\"false\" `name`=\"...\" `role`=\"combobox\" `style`=\"width: 100%;\" `type`=\"text\">",
  "label_aria-required_for": "The issue with the code snippet is that the `aria-required` attribute is not allowed for the `label` element's role. The correct version of the code snippet should be:\n\n<label for=\"journalType\" aria-required=\"true\"></label>\n\nHere, the `aria-required` attribute is added after the `for` attribute and before the closing `>` tag. This ensures that the attribute is associated with the `label` element and not with any other element.",
  "html_aria-level_lang": "The issue with this code snippet is that the `aria-level` attribute is not allowed for the `html` element's role. The `aria-level` attribute is only allowed for certain roles, such as `heading`. \n\nThe correct version of the code snippet would be: \n\n```html\n<html lang=\"en\">\n```\n\nWithout the `aria-level` attribute.",
  "label_aria-placeholder": "The issue with the code snippet is that the `aria-placeholder` attribute is not allowed for the `label` element's role. The correct version of the code snippet would be: <`label` `for`=\"amount-input\">Amount</label> where `for` attribute is used to associate the label with an input element with `id` \"amount-input\".",
  "label_aria-placeholder_strong": "The issue with the code snippet is that the `aria-placeholder` attribute is not allowed for the `label` element's role. According to the WAI-ARIA specification, the `aria-placeholder` attribute is only allowed for `input`, `textarea`, and `select` elements. \n\nThe correct version of the code snippet would be:\n\n<label for=\"amount\"><strong>Amount</strong></label>\n\nIn this version, the `for` attribute is used to associate the label with its corresponding form element, and the `strong` element is used for styling purposes. This ensures that the label is accessible and follows best practices for web accessibility."
}
